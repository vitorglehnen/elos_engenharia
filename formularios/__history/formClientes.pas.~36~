unit formClientes;

interface

uses
  Winapi.Windows,
  Winapi.Messages,
  System.Variants,
  System.Classes,
  Vcl.Graphics,
  Vcl.Controls,
  Vcl.Forms,
  Vcl.Dialogs,
  Vcl.ExtCtrls,
  Data.DB,
  Vcl.Grids,
  Vcl.DBGrids,
  Vcl.StdCtrls,
  Vcl.Mask,
  Vcl.ComCtrls,
  Vcl.TabNotBk,
  Vcl.Buttons,
  Vcl.DBCtrls,
  dmClientes,
  Vcl.CategoryButtons,
  Vcl.CheckLst,
  ShellAPI,
  uReqUteis,
  System.JSON, JvDBControls, JvExDBGrids, JvDBGrid, JvExMask, JvToolEdit;

type
  TfrmClientes = class(TForm)
    ntbPrincipal: TTabbedNotebook;
    pnlPrincipalConsulta: TPanel;
    pnlGrid: TPanel;
    dbgConsulta: TDBGrid;
    pnlConsulta: TPanel;
    lblCidadeConsulta: TLabel;
    edtCpfConsulta: TLabeledEdit;
    edtNomeConsulta: TLabeledEdit;
    btnConsultar: TButton;
    pnlPrincipalCadastro: TPanel;
    pnlBtnCrud: TPanel;
    chklbCidadesConsulta: TCheckListBox;
    edtDtIniConsulta: TMaskEdit;
    lblDataCadastroConsulta: TLabel;
    edtDtFimConsulta: TMaskEdit;
    nvPrincipal: TJvDBNavigator;
    lblCancelar: TLabel;
    lblExcluir: TLabel;
    lblInserir: TLabel;
    lblSalvar: TLabel;
    pgcPrincipal: TPageControl;
    pgCadastro: TTabSheet;
    pgProjetos: TTabSheet;
    edtCodCad: TDBEdit;
    lblCodigoCad: TLabel;
    chkInativo: TDBCheckBox;
    edtNomeCad: TDBEdit;
    lblNomeCad: TLabel;
    DBEdit3: TDBEdit;
    lblCpfCad: TLabel;
    edtDataNascCad: TDBEdit;
    lblDataNascimento: TLabel;
    DBEdit1: TDBEdit;
    lblFone: TLabel;
    btnWhatsApp: TBitBtn;
    edtDtCadastroCad: TDBEdit;
    lblDataCad: TLabel;
    gpbEnderecoCad: TGroupBox;
    lblRuaCad: TLabel;
    lblNroCad: TLabel;
    lblComplementoCad: TLabel;
    lblCidadeCad: TLabel;
    lblUfCad: TLabel;
    lblCoordenadaCad: TLabel;
    lblCepCad: TLabel;
    lblBairroCad: TLabel;
    edtRuaCad: TDBEdit;
    edtNroCad: TDBEdit;
    edtComplementoCad: TDBEdit;
    edtCoordenadasCad: TDBEdit;
    cbEstadosCad: TComboBox;
    cbCidadesCad: TComboBox;
    btnCoordenadaMaps: TBitBtn;
    edtCepCad: TDBEdit;
    btnCepMaps: TBitBtn;
    edtBairroCad: TDBEdit;
    lblCodProjeto: TLabel;
    edtCodProjeto: TDBEdit;
    chkMinhaCasaMinhaVida: TDBCheckBox;
    lblTamanhoProjeto: TLabel;
    edtTamanhoProjeto: TDBEdit;
    lblValorProjeto: TLabel;
    edtValorProjeto: TDBEdit;
    lblSituProjeto: TLabel;
    lblCoordenadasProjeto: TLabel;
    edtCoordenadasProjeto: TDBEdit;
    lblDataInicioProjeto: TLabel;
    lblDataPrevisaoProjeto: TLabel;
    chkFinalizado: TDBCheckBox;
    btnCoordenadaMapsProjeto: TBitBtn;
    pnlGridProjetos: TPanel;
    dbgProjetos: TJvDBGrid;
    edtDataInicioProjeto: TJvDBDateEdit;
    edtDataPrevisaoProjeto: TJvDBDateEdit;
    procedure FormShow(Sender: TObject);
    procedure btnNovoClick(Sender: TObject);
    procedure cbEstadosCadChange(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure dbgConsultaDblClick(Sender: TObject);
    procedure cbCidadesCadChange(Sender: TObject);
    procedure btnConsultarClick(Sender: TObject);
    procedure ntbPrincipalChange(Sender: TObject; NewTab: Integer;
      var AllowChange: Boolean);
    procedure btnCepMapsClick(Sender: TObject);
    procedure btnCoordenadaMapsClick(Sender: TObject);
    procedure btnWhatsAppClick(Sender: TObject);
    procedure pgcPrincipalChanging(Sender: TObject; var AllowChange: Boolean);
    procedure btnCoordenadaMapsProjetoClick(Sender: TObject);
    procedure pgcPrincipalChange(Sender: TObject);
  private
    { Private declarations }

    FDSClientes : TDataSet;
    FDSEstados : TDataSet;
    FDSCidades : TDataSet;
    FDSProjetos : TDataSet;
    FIBGECidades : TStringList;

    procedure DsClientesAfterScroll(TDataSet: TDataSet);
    procedure DsClientesAfterInsert(TDataSet: TDataSet);
    procedure DsClientesBeforePost(TDataSet: TDataSet);
    procedure DsClientesAfterPost(TDataSet: TDataSet);

    procedure DsProjetosBeforePost(TDataSet: TDataSet);

    procedure MontaFiltroConsulta;
    procedure CoordenadasNoMaps(aCoordenadas: String);

    procedure CarregaCidades;
    procedure CarregaEstados;
  public
    { Public declarations }
  end;

var
  frmClientes: TfrmClientes;

implementation

uses
  System.SysUtils, dmMain;

{$R *.dfm}

procedure TfrmClientes.btnCepMapsClick(Sender: TObject);
var vUrl, vCep : String;
    vJsonResponseCep: TJSONObject;
begin
   vCep := FDSClientes.FieldByName('CL_CEP').AsString;

   if vCep <> '' then
   begin
      // Realiza a requisição para pegar as informações do CEP e já preenche nos campos
      vJsonResponseCep := RetornaInformacoesCep(vCep);

      with FDSClientes do
      begin
         if FDSClientes.State <> dsEdit then
            FDSClientes.Edit;

         cbEstadosCad.ItemIndex := cbEstadosCad.Items.IndexOf(vJsonResponseCep.GetValue('uf').Value);
         cbEstadosCadChange(cbEstadosCad);
         cbCidadesCad.ItemIndex := cbCidadesCad.Items.IndexOf(RemoveAcentos(vJsonResponseCep.GetValue('localidade').Value));

         FDSClientes.FieldByName('CL_COMPLEMENTO').AsString := vJsonResponseCep.GetValue('complemento').Value;
         FDSClientes.FieldByName('CL_BAIRRO').AsString := vJsonResponseCep.GetValue('bairro').Value;
         FDSClientes.FieldByName('CL_RUA').AsString := vJsonResponseCep.GetValue('logradouro').Value;

         FDSClientes.Post;
      end;

      // Abre a localização do CEP no google maps
      vUrl := 'https://www.google.com/maps/search/?api=1&query=' + vCep;
      ShellExecute(0, 'open', PChar(vUrl), nil, nil, SW_SHOWNORMAL);
   end;
end;

procedure TfrmClientes.btnConsultarClick(Sender: TObject);
begin
   MontaFiltroConsulta;

   FDSClientes.Open;
   FDSProjetos.Open;
end;

procedure TfrmClientes.btnCoordenadaMapsClick(Sender: TObject);
begin
   CoordenadasNoMaps(FDSClientes.FieldByName('CL_COORDENADAS').AsString);
end;

procedure TfrmClientes.btnCoordenadaMapsProjetoClick(Sender: TObject);
begin
   CoordenadasNoMaps(FDSProjetos.FieldByName('PJ_COORDENADAS').AsString);
end;

procedure TfrmClientes.btnNovoClick(Sender: TObject);
begin
   FDSClientes.Append;
end;

procedure TfrmClientes.btnWhatsAppClick(Sender: TObject);
var vUrl, vFone : String;
begin
   vFone := FDSClientes.FieldByName('CL_FONE').AsString;

   if not vFone.IsEmpty then
   begin
      vUrl := 'https://wa.me/55' + FDSClientes.FieldByName('CL_FONE').AsString;
      ShellExecute(0, 'open', PChar(vUrl), nil, nil, SW_SHOWNORMAL);
   end;
end;

procedure TfrmClientes.CarregaCidades;
begin
   dm_Clientes.qryCidades.Open('select cidades.*' +
                      ' from cidades' +
                      ' join estados on es_ibge = ci_estado and es_uf =' +''''+ cbEstadosCad.Text +''''+
                      ' order by ci_nome');

   with FDSCidades do
   begin
      cbCidadesCad.Items.Clear;
      FIBGECidades.Clear;
      while not Eof do
      begin
         cbCidadesCad.Items.Add(FieldByName('CI_NOME').AsString);
         FIBGECidades.Add(FieldByName('CI_IBGE').AsString);

         Next;
      end;
   end;

   dm_Clientes.qryCidades.Close;
end;

procedure TfrmClientes.CarregaEstados;
begin
   dm_Clientes.qryEstados.Open;

   with FDSEstados do
   begin
      while not Eof do
      begin
         cbEstadosCad.Items.Add(FieldByName('ES_UF').AsString);

         Next;
      end;
   end;

   dm_Clientes.qryEstados.Close;
end;

procedure TfrmClientes.cbCidadesCadChange(Sender: TObject);
begin
   FDSClientes.Edit;
end;

procedure TfrmClientes.cbEstadosCadChange(Sender: TObject);
begin
   CarregaCidades;
   FDSClientes.Edit;
end;

procedure TfrmClientes.CoordenadasNoMaps(aCoordenadas: String);
var vUrl : String;
begin
   if not aCoordenadas.IsEmpty then
   begin
      vUrl := 'https://www.google.com/maps/search/?api=1&query=' + aCoordenadas;
      ShellExecute(0, 'open', PChar(vUrl), nil, nil, SW_SHOWNORMAL);
   end;
end;

procedure TfrmClientes.dbgConsultaDblClick(Sender: TObject);
begin
   ntbPrincipal.PageIndex := 1;
   pgcPrincipal.ActivePageIndex := 0;
end;

procedure TfrmClientes.DsClientesAfterInsert(TDataSet: TDataSet);
begin
   edtNomeCad.SetFocus;

   FDSClientes.FieldByName('CL_INATIVO').AsString := 'N';
   FDSClientes.FieldByName('CL_DTCADASTRO').AsString := FormatDateTime('dd/mm/yyyy', Now);
end;

procedure TfrmClientes.DsClientesAfterPost(TDataSet: TDataSet);
begin

end;

procedure TfrmClientes.DsClientesAfterScroll(TDataSet: TDataSet);
begin
   cbEstadosCad.ItemIndex := cbEstadosCad.Items.IndexOf(FDSClientes.FieldByName('ES_UF').AsString);
   CarregaCidades;

   cbCidadesCad.ItemIndex := cbCidadesCad.Items.IndexOf(FDSClientes.FieldByName('CI_NOME').AsString);

   if FDSClientes.State = dsInsert then
   begin
      cbEstadosCad.ItemIndex := cbEstadosCad.Items.IndexOf('RS');
      CarregaCidades;
      cbCidadesCad.ItemIndex := cbCidadesCad.Items.IndexOf('Mato Leitao');
   end;
end;

procedure TfrmClientes.DsClientesBeforePost(TDataSet: TDataSet);
begin
   with FDSClientes do
   begin
      FieldByName('CL_CIDADE').AsString := FIBGECidades[cbCidadesCad.ItemIndex];
   end;
end;

procedure TfrmClientes.DsProjetosBeforePost(TDataSet: TDataSet);
begin
   TDataSet.FieldByName('PJ_CLIENTE').Value := FDSClientes.FieldByName('CL_CODIGO').Value;
end;

procedure TfrmClientes.FormCreate(Sender: TObject);
begin
   //Datasets
   FDSClientes := dm_Clientes.dsClientes.DataSet;
   FDSEstados  := dm_Clientes.dsEstados.DataSet;
   FDSCidades  := dm_Clientes.dsCidades.DataSet;
   FDSProjetos := dm_Clientes.dsProjetos.DataSet;

   FIBGECidades := TStringList.Create;

   //Eventos da query de clientes
   dm_Clientes.qryClientes.AfterScroll := DsClientesAfterScroll;
   dm_Clientes.qryClientes.AfterInsert := DsClientesAfterInsert;
   dm_Clientes.qryClientes.BeforePost  := DsClientesBeforePost;
   dm_Clientes.qryClientes.AfterPost   := DsClientesAfterPost;

   //Eventos da query de projetos dos clientes
   dm_Clientes.qryProjetos.BeforePost := DsProjetosBeforePost;

   //Preenche os combobox's
   CarregaEstados;
   CarregaCidades;
end;

procedure TfrmClientes.FormShow(Sender: TObject);
begin
   ntbPrincipal.PageIndex       := 0;
   pgcPrincipal.ActivePageIndex := 0;

   TDrawGrid(dbgConsulta).ScrollBars := ssVertical;
   DsClientesAfterScroll(dm_Clientes.dsClientes.DataSet);

   TDrawGrid(dbgProjetos).ScrollBars := ssVertical;

   {$REGION 'Preenche cidades da consulta'}
   dm_Clientes.qryCidades.Open('select distinct(ci_ibge), ci_nome, ci_estado '+
                        'from cidades '+
                        'join clientes on cl_cidade = ci_ibge '+
                        'order by 1');
   while not FDSCidades.Eof do
   begin
    chklbCidadesConsulta.Items.Add(FDSCidades.FieldByName('ci_nome').AsString);

    FDSCidades.Next;
   end;
   {$ENDREGION}
end;

procedure TfrmClientes.MontaFiltroConsulta;
var vCidadesSelecionadas : String;
    vContador : Integer;
    vSql : String;
    vWhereSql : String;
begin
   vSql := '';
   vWhereSql := '';

   {$REGION 'Cidades'}
   vCidadesSelecionadas := '';
   vContador := 0;

   FDSClientes.Close;

   for vContador := 0 to chklbCidadesConsulta.Items.Count - 1 do
   begin
      if chklbCidadesConsulta.Checked[vContador] then
         vCidadesSelecionadas := vCidadesSelecionadas + '''' + chklbCidadesConsulta.Items[vContador] + ''''  + ',';
   end;


   if vCidadesSelecionadas <> '' then
   begin
      //Deleta a ultima virgula
      Delete(vCidadesSelecionadas, Length(vCidadesSelecionadas), 1);

      vWhereSql := 'CI_NOME in (' + vCidadesSelecionadas + ') and ';
   end;
   {$ENDREGION}

   {$REGION 'Data Cadastro'}
   if ((edtDtIniConsulta.Text <> '  /  /    ') and (edtDtIniConsulta.Text <> '  /  /    ')) then
   begin
      if vWhereSql = '' then
         vWhereSql := 'CL_DTCADASTRO BETWEEN ' +
                      ''''+FormatDateTime('dd.mm.yyyy', StrToDate(edtDtIniConsulta.Text))+''''+
                      ' and ' +
                      ''''+FormatDateTime('dd.mm.yyyy', StrToDate(edtDtFimConsulta.Text))+'''' + ' and '
      else
         vWhereSql := vWhereSql + 'CL_DTCADASTRO BETWEEN ' +
                      ''''+FormatDateTime('dd.mm.yyyy', StrToDate(edtDtIniConsulta.Text))+''''+
                      ' and ' +
                      ''''+FormatDateTime('dd.mm.yyyy', StrToDate(edtDtFimConsulta.Text))+'''' + ' and ';
   end;
   {$ENDREGION}

   {$REGION 'CPF'}
   if (edtCpfConsulta.Text <> '') then
   begin
      if vWhereSql = '' then
         vWhereSql := 'CL_CPF LIKE ' + '''' + edtCpfConsulta.Text + '%''' + ' and '
      else
         vWhereSql := vWhereSql + 'CL_CPF LIKE ' + '''' + edtCpfConsulta.Text + '%''' + ' and ';
   end;
   {$ENDREGION}

   {$REGION 'Nome'}
   if (edtNomeConsulta.Text <> '') then
   begin
    if vWhereSql = '' then
      vWhereSql := 'UPPER(CL_NOME) LIKE ' + '''%' + UpperCase(edtNomeConsulta.Text) + '%''' + ' and '
    else
      vWhereSql := vWhereSql + 'UPPER(CL_NOME) LIKE ' + '''%' + UpperCase(edtNomeConsulta.Text) + '%''' + ' and ';
   end;
   {$ENDREGION}

   // Remove o AND que fica no final da string
   if vWhereSql <> '' then
   begin
      vWhereSql := Copy(vWhereSql, 1, Length(vWhereSql) - 4);
      vWhereSql := ' WHERE ' + vWhereSql;
   end;

   dm_Clientes.qryClientes.SQL.Text := 'select * '+
                              'from clientes '+
                              'join cidades on ci_ibge = cl_cidade '+
                              'join estados on es_ibge = ci_estado' + vWhereSql;
end;

procedure TfrmClientes.ntbPrincipalChange(Sender: TObject; NewTab: Integer;
  var AllowChange: Boolean);
begin
   if ((ntbPrincipal.PageIndex = 1) and
      ((FDSClientes.State = dsInsert) or (FDSClientes.State = dsEdit))) then
   begin
      AllowChange := False;
      MessageDlg('Salve ou cancele o registro antes de sair!', mtWarning, [mbOK], 0);
   end;
end;

procedure TfrmClientes.pgcPrincipalChange(Sender: TObject);
begin
   case pgcPrincipal.ActivePageIndex of
      0: nvPrincipal.DataSource := dm_Clientes.dsClientes;
      1: nvPrincipal.DataSource := dm_Clientes.dsProjetos;
   end;
end;

procedure TfrmClientes.pgcPrincipalChanging(Sender: TObject;
  var AllowChange: Boolean);
begin
   if (FDSClientes.State in dsEditModes) or
     (FDSProjetos.State in dsEditModes) then
   begin
      AllowChange := False;
   end;
end;

end.
